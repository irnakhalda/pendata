Traceback (most recent call last):
  File "/usr/local/python/3.12.1/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/python/3.12.1/lib/python3.12/asyncio/base_events.py", line 684, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.local/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import psycopg2
import pymysql
import numpy as np
import pandas as pd

def get_pg_data():
    conn = psycopg2.connect(
        host="pg-386e5cc2-pendatatugas.i.aivencloud.com",
        user="avnadmin",
        password="AVNS_7tnhSuMHnji20iEQMHm",
        database="defaultdb",
        port=18544
    )
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM iris_postgresql")
    data = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    cursor.close()
    conn.close()

    

    return pd.DataFrame(data, columns=columns)

def get_mysql_data():
    conn = pymysql.connect(
        host="mysql-1d4251e3-pendatatugas.i.aivencloud.com",
        user="avnadmin",
        password="AVNS_pyuM76LsQluDuryhiI2",
        database="defaultdb",
        port=18544
    )
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM irismysql")
    data = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    cursor.close()
    conn.close()

    return pd.DataFrame(data, columns=columns)

# Ambil data dari kedua database
df_postgresql = get_pg_data()
df_mysql = get_mysql_data()

# Gabungkan berdasarkan kolom 'id' dan 'Class'
df_merged = pd.merge(df_mysql, df_postgresql, on=["id", "class"], how="inner")

# Cetak semua data hasil gabungan tanpa indeks
print(df_merged.to_string(index=False))
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mRuntimeError[0m                              Traceback (most recent call last)
Cell [0;32mIn[2], line 44[0m
[1;32m     42[0m [38;5;66;03m# Ambil data dari kedua database[39;00m
[1;32m     43[0m df_postgresql [38;5;241m=[39m get_pg_data()
[0;32m---> 44[0m df_mysql [38;5;241m=[39m [43mget_mysql_data[49m[43m([49m[43m)[49m
[1;32m     46[0m [38;5;66;03m# Gabungkan berdasarkan kolom 'id' dan 'Class'[39;00m
[1;32m     47[0m df_merged [38;5;241m=[39m pd[38;5;241m.[39mmerge(df_mysql, df_postgresql, on[38;5;241m=[39m[[38;5;124m"[39m[38;5;124mid[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mclass[39m[38;5;124m"[39m], how[38;5;241m=[39m[38;5;124m"[39m[38;5;124minner[39m[38;5;124m"[39m)

Cell [0;32mIn[2], line 26[0m, in [0;36mget_mysql_data[0;34m()[0m
[1;32m     25[0m [38;5;28;01mdef[39;00m [38;5;21mget_mysql_data[39m():
[0;32m---> 26[0m     conn [38;5;241m=[39m [43mpymysql[49m[38;5;241;43m.[39;49m[43mconnect[49m[43m([49m
[1;32m     27[0m [43m        [49m[43mhost[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mmysql-1d4251e3-pendatatugas.i.aivencloud.com[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m     28[0m [43m        [49m[43muser[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mavnadmin[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m     29[0m [43m        [49m[43mpassword[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mAVNS_pyuM76LsQluDuryhiI2[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m     30[0m [43m        [49m[43mdatabase[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mdefaultdb[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m     31[0m [43m        [49m[43mport[49m[38;5;241;43m=[39;49m[38;5;241;43m18544[39;49m
[1;32m     32[0m [43m    [49m[43m)[49m
[1;32m     33[0m     cursor [38;5;241m=[39m conn[38;5;241m.[39mcursor()
[1;32m     34[0m     cursor[38;5;241m.[39mexecute([38;5;124m"[39m[38;5;124mSELECT * FROM irismysql[39m[38;5;124m"[39m)

File [0;32m/usr/local/python/3.12.1/lib/python3.12/site-packages/pymysql/connections.py:361[0m, in [0;36mConnection.__init__[0;34m(self, user, password, host, database, unix_socket, port, charset, collation, sql_mode, read_default_file, conv, use_unicode, client_flag, cursorclass, init_command, connect_timeout, read_default_group, autocommit, local_infile, max_allowed_packet, defer_connect, auth_plugin_map, read_timeout, write_timeout, bind_address, binary_prefix, program_name, server_public_key, ssl, ssl_ca, ssl_cert, ssl_disabled, ssl_key, ssl_key_password, ssl_verify_cert, ssl_verify_identity, compress, named_pipe, passwd, db)[0m
[1;32m    359[0m     [38;5;28mself[39m[38;5;241m.[39m_sock [38;5;241m=[39m [38;5;28;01mNone[39;00m
[1;32m    360[0m [38;5;28;01melse[39;00m:
[0;32m--> 361[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mconnect[49m[43m([49m[43m)[49m

File [0;32m/usr/local/python/3.12.1/lib/python3.12/site-packages/pymysql/connections.py:669[0m, in [0;36mConnection.connect[0;34m(self, sock)[0m
[1;32m    666[0m [38;5;28mself[39m[38;5;241m.[39m_next_seq_id [38;5;241m=[39m [38;5;241m0[39m
[1;32m    668[0m [38;5;28mself[39m[38;5;241m.[39m_get_server_information()
[0;32m--> 669[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_request_authentication[49m[43m([49m[43m)[49m
[1;32m    671[0m [38;5;66;03m# Send "SET NAMES" query on init for:[39;00m
[1;32m    672[0m [38;5;66;03m# - Ensure charaset (and collation) is set to the server.[39;00m
[1;32m    673[0m [38;5;66;03m#   - collation_id in handshake packet may be ignored.[39;00m
[0;32m   (...)[0m
[1;32m    682[0m [38;5;66;03m# - https://github.com/wagtail/wagtail/issues/9477[39;00m
[1;32m    683[0m [38;5;66;03m# - https://zenn.dev/methane/articles/2023-mysql-collation (Japanese)[39;00m
[1;32m    684[0m [38;5;28mself[39m[38;5;241m.[39mset_character_set([38;5;28mself[39m[38;5;241m.[39mcharset, [38;5;28mself[39m[38;5;241m.[39mcollation)

File [0;32m/usr/local/python/3.12.1/lib/python3.12/site-packages/pymysql/connections.py:979[0m, in [0;36mConnection._request_authentication[0;34m(self)[0m
[1;32m    977[0m [38;5;66;03m# https://dev.mysql.com/doc/internals/en/successful-authentication.html[39;00m
[1;32m    978[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39m_auth_plugin_name [38;5;241m==[39m [38;5;124m"[39m[38;5;124mcaching_sha2_password[39m[38;5;124m"[39m:
[0;32m--> 979[0m     auth_packet [38;5;241m=[39m [43m_auth[49m[38;5;241;43m.[39;49m[43mcaching_sha2_password_auth[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mauth_packet[49m[43m)[49m
[1;32m    980[0m [38;5;28;01melif[39;00m [38;5;28mself[39m[38;5;241m.[39m_auth_plugin_name [38;5;241m==[39m [38;5;124m"[39m[38;5;124msha256_password[39m[38;5;124m"[39m:
[1;32m    981[0m     auth_packet [38;5;241m=[39m _auth[38;5;241m.[39msha256_password_auth([38;5;28mself[39m, auth_packet)

File [0;32m/usr/local/python/3.12.1/lib/python3.12/site-packages/pymysql/_auth.py:267[0m, in [0;36mcaching_sha2_password_auth[0;34m(conn, pkt)[0m
[1;32m    264[0m     [38;5;28;01mif[39;00m DEBUG:
[1;32m    265[0m         [38;5;28mprint[39m(conn[38;5;241m.[39mserver_public_key[38;5;241m.[39mdecode([38;5;124m"[39m[38;5;124mascii[39m[38;5;124m"[39m))
[0;32m--> 267[0m data [38;5;241m=[39m [43msha2_rsa_encrypt[49m[43m([49m[43mconn[49m[38;5;241;43m.[39;49m[43mpassword[49m[43m,[49m[43m [49m[43mconn[49m[38;5;241;43m.[39;49m[43msalt[49m[43m,[49m[43m [49m[43mconn[49m[38;5;241;43m.[39;49m[43mserver_public_key[49m[43m)[49m
[1;32m    268[0m pkt [38;5;241m=[39m _roundtrip(conn, data)

File [0;32m/usr/local/python/3.12.1/lib/python3.12/site-packages/pymysql/_auth.py:144[0m, in [0;36msha2_rsa_encrypt[0;34m(password, salt, public_key)[0m
[1;32m    139[0m [38;5;250m[39m[38;5;124;03m"""Encrypt password with salt and public_key.[39;00m
[1;32m    140[0m 
[1;32m    141[0m [38;5;124;03mUsed for sha256_password and caching_sha2_password.[39;00m
[1;32m    142[0m [38;5;124;03m"""[39;00m
[1;32m    143[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m _have_cryptography:
[0;32m--> 144[0m     [38;5;28;01mraise[39;00m [38;5;167;01mRuntimeError[39;00m(
[1;32m    145[0m         [38;5;124m"[39m[38;5;124m'[39m[38;5;124mcryptography[39m[38;5;124m'[39m[38;5;124m package is required for sha256_password or[39m[38;5;124m"[39m
[1;32m    146[0m         [38;5;241m+[39m [38;5;124m"[39m[38;5;124m caching_sha2_password auth methods[39m[38;5;124m"[39m
[1;32m    147[0m     )
[1;32m    148[0m message [38;5;241m=[39m _xor_password(password [38;5;241m+[39m [38;5;124mb[39m[38;5;124m"[39m[38;5;130;01m\0[39;00m[38;5;124m"[39m, salt)
[1;32m    149[0m rsa_key [38;5;241m=[39m serialization[38;5;241m.[39mload_pem_public_key(public_key, default_backend())

[0;31mRuntimeError[0m: 'cryptography' package is required for sha256_password or caching_sha2_password auth methods

